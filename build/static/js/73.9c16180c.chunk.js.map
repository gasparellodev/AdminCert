{"version":3,"sources":["components/authentication/password-reset/PasswordResetAmplify.js","pages/authentication/PasswordReset.js"],"names":["PasswordResetAmplify","mounted","useMounted","passwordReset","useAuth","location","useLocation","navigate","useNavigate","itemsRef","useRef","useEffect","current","slice","initialValues","code","email","state","username","password","passwordConfirm","submit","validationSchema","Yup","shape","of","required","max","min","oneOf","onSubmit","values","a","setErrors","setStatus","setSubmitting","join","console","error","success","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","setFieldValue","touched","noValidate","TextField","disabled","fullWidth","margin","value","variant","autoFocus","Boolean","helperText","label","name","onBlur","onChange","type","Typography","color","sx","mb","mt","Box","columnGap","display","gridTemplateColumns","py","map","ref","i","Array","isArray","length","inputRef","el","onKeyDown","event","focus","Number","isInteger","parseInt","key","onPaste","pasteArray","clipboardData","getData","split","valid","forEach","x","textAlign","FormHelperText","mx","find","undefined","Button","size","platformIcons","Amplify","Auth0","Firebase","JWT","PasswordReset","platform","gtm","push","backgroundColor","flexDirection","minHeight","AuthBanner","Container","maxWidth","justifyContent","to","Logo","height","width","Card","CardContent","p","alignItems","gutterBottom","maxHeight","alt","src","flexGrow","Divider","my","Link","component","RouterLink"],"mappings":"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","file":"static/js/73.9c16180c.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport { Box, Button, FormHelperText, TextField, Typography } from '@material-ui/core';\r\nimport useAuth from '../../../hooks/useAuth';\r\nimport useMounted from '../../../hooks/useMounted';\r\n\r\nconst PasswordResetAmplify = () => {\r\n  const mounted = useMounted();\r\n  const { passwordReset } = useAuth();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const itemsRef = useRef([]);\r\n\r\n  useEffect(() => {\r\n    itemsRef.current = itemsRef.current.slice(0, 6);\r\n  }, []);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        code: ['', '', '', '', '', ''],\r\n        email: location.state?.username || '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n        submit: null\r\n      }}\r\n      validationSchema={\r\n        Yup\r\n          .object()\r\n          .shape({\r\n            code: Yup\r\n              .array()\r\n              .of(Yup.string().required('Code is required')),\r\n            email: Yup\r\n              .string()\r\n              .email('Must be a valid email')\r\n              .max(255)\r\n              .required('Email is required'),\r\n            password: Yup\r\n              .string()\r\n              .min(7, 'Must be at least 7 characters')\r\n              .max(255)\r\n              .required('Required'),\r\n            passwordConfirm: Yup\r\n              .string()\r\n              .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n              .required('Required')\r\n          })\r\n      }\r\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n        try {\r\n          await passwordReset(values.email, values.code.join(''), values.password);\r\n\r\n          navigate('/authentication/login');\r\n        } catch (err) {\r\n          console.error(err);\r\n          if (mounted.current) {\r\n            setStatus({ success: false });\r\n            setErrors({ submit: err.message });\r\n            setSubmitting(false);\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue,\r\n        touched,\r\n        values\r\n      }) => (\r\n        <form\r\n          noValidate\r\n          onSubmit={handleSubmit}\r\n        >\r\n          {!location.state?.username\r\n            ? (\r\n              <TextField\r\n                autoFocus\r\n                error={Boolean(touched.email && errors.email)}\r\n                fullWidth\r\n                helperText={touched.email && errors.email}\r\n                label=\"Email Address\"\r\n                margin=\"normal\"\r\n                name=\"email\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                type=\"email\"\r\n                value={values.email}\r\n                variant=\"outlined\"\r\n              />\r\n            )\r\n            : (\r\n              <TextField\r\n                disabled\r\n                fullWidth\r\n                margin=\"normal\"\r\n                value={location.state.username}\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          <Typography\r\n            color=\"textSecondary\"\r\n            sx={{\r\n              mb: 2,\r\n              mt: 3\r\n            }}\r\n            variant=\"subtitle2\"\r\n          >\r\n            Verification code\r\n          </Typography>\r\n          <Box\r\n            sx={{\r\n              columnGap: '16px',\r\n              display: 'grid',\r\n              gridTemplateColumns: 'repeat(7, 1fr)',\r\n              py: 1\r\n            }}\r\n          >\r\n            {[1, 2, 3, 4, 5, 6].map((ref, i) => (\r\n              <TextField\r\n                error={Boolean(Array.isArray(touched.code)\r\n                  && touched.code.length === 6\r\n                  && errors.code)}\r\n                fullWidth\r\n                inputRef={(el) => itemsRef.current[i] = el}\r\n                // eslint-disable-next-line react/no-array-index-key\r\n                key={`codeNumber-${i}`}\r\n                name={`code[${i}]`}\r\n                onBlur={handleBlur}\r\n                onKeyDown={(event) => {\r\n                  if (event.code === 'ENTER') {\r\n                    if (values.code[i]) {\r\n                      setFieldValue(`code[${i}]`, '');\r\n                      return;\r\n                    }\r\n\r\n                    if (i > 0) {\r\n                      setFieldValue(`code[${i}]`, '');\r\n                      itemsRef.current[i - 1].focus();\r\n                      return;\r\n                    }\r\n                  }\r\n\r\n                  if (Number.isInteger(parseInt(event.key, 10))) {\r\n                    setFieldValue(`code[${i}]`, event.key);\r\n\r\n                    if (i < 5) {\r\n                      itemsRef.current[i + 1].focus();\r\n                    }\r\n                  }\r\n                }}\r\n                onPaste={(event) => {\r\n                  const paste = event.clipboardData.getData('text');\r\n                  const pasteArray = paste.split('');\r\n\r\n                  if (pasteArray.length !== 6) {\r\n                    return;\r\n                  }\r\n\r\n                  let valid = true;\r\n\r\n                  pasteArray.forEach((x) => {\r\n                    if (!Number.isInteger(parseInt(x, 10))) {\r\n                      valid = false;\r\n                    }\r\n                  });\r\n\r\n                  if (valid) {\r\n                    setFieldValue('code', pasteArray);\r\n                    itemsRef.current[5].focus();\r\n                  }\r\n                }}\r\n                value={values.code[i]}\r\n                sx={{\r\n                  display: 'inline-block',\r\n                  textAlign: 'center',\r\n                  '& .MuiInputBase-input': {\r\n                    textAlign: 'center'\r\n                  }\r\n                }}\r\n                variant=\"outlined\"\r\n              />\r\n            ))}\r\n          </Box>\r\n          {Boolean(Array.isArray(touched.code) && touched.code.length === 6 && errors.code) && (\r\n            <FormHelperText\r\n              error\r\n              sx={{ mx: '14px' }}\r\n            >\r\n              {Array.isArray(errors.code) && errors.code.find((x) => x !== undefined)}\r\n            </FormHelperText>\r\n          )}\r\n          <TextField\r\n            error={Boolean(touched.password && errors.password)}\r\n            fullWidth\r\n            helperText={touched.password && errors.password}\r\n            label=\"Password\"\r\n            margin=\"normal\"\r\n            name=\"password\"\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            type=\"password\"\r\n            value={values.password}\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            error={Boolean(touched.passwordConfirm && errors.passwordConfirm)}\r\n            fullWidth\r\n            helperText={touched.passwordConfirm && errors.passwordConfirm}\r\n            label=\"Password Confirmation\"\r\n            margin=\"normal\"\r\n            name=\"passwordConfirm\"\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            type=\"password\"\r\n            value={values.passwordConfirm}\r\n            variant=\"outlined\"\r\n          />\r\n          {errors.submit && (\r\n            <Box sx={{ mt: 3 }}>\r\n              <FormHelperText error>\r\n                {errors.submit}\r\n              </FormHelperText>\r\n            </Box>\r\n          )}\r\n          <Box sx={{ mt: 3 }}>\r\n            <Button\r\n              color=\"primary\"\r\n              disabled={isSubmitting}\r\n              fullWidth\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n            >\r\n              Reset Password\r\n            </Button>\r\n          </Box>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default PasswordResetAmplify;\r\n","import { useEffect } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { Box, Card, CardContent, Container, Divider, Link, Typography } from '@material-ui/core';\r\nimport AuthBanner from '../../components/authentication/AuthBanner';\r\nimport { PasswordResetAmplify } from '../../components/authentication/password-reset';\r\nimport Logo from '../../components/Logo';\r\nimport useAuth from '../../hooks/useAuth';\r\nimport gtm from '../../lib/gtm';\r\n\r\nconst platformIcons = {\r\n  Amplify: '/static/icons/amplify.svg',\r\n  Auth0: '/static/icons/auth0.svg',\r\n  Firebase: '/static/icons/firebase.svg',\r\n  JWT: '/static/icons/jwt.svg'\r\n};\r\n\r\nconst PasswordReset = () => {\r\n  const { platform } = useAuth();\r\n\r\n  useEffect(() => {\r\n    gtm.push({ event: 'page_view' });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Password Reset | Material Kit Pro</title>\r\n      </Helmet>\r\n      <Box\r\n        sx={{\r\n          backgroundColor: 'background.default',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          minHeight: '100vh'\r\n        }}\r\n      >\r\n        <AuthBanner />\r\n        <Container\r\n          maxWidth=\"sm\"\r\n          sx={{ py: 10 }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'center'\r\n            }}\r\n          >\r\n            <RouterLink to=\"/\">\r\n              <Logo\r\n                sx={{\r\n                  height: 40,\r\n                  width: 40\r\n                }}\r\n              />\r\n            </RouterLink>\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              mb: 8\r\n            }}\r\n          />\r\n          <Card>\r\n            <CardContent\r\n              sx={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                p: 4\r\n              }}\r\n            >\r\n              <Box\r\n                sx={{\r\n                  alignItems: 'center',\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                  mb: 3\r\n                }}\r\n              >\r\n                <div>\r\n                  <Typography\r\n                    color=\"textPrimary\"\r\n                    gutterBottom\r\n                    variant=\"h4\"\r\n                  >\r\n                    Password Reset\r\n                  </Typography>\r\n                  <Typography\r\n                    color=\"textSecondary\"\r\n                    variant=\"body2\"\r\n                  >\r\n                    Reset your account password using your code\r\n                  </Typography>\r\n                </div>\r\n                <Box\r\n                  sx={{\r\n                    height: 32,\r\n                    '& > img': {\r\n                      maxHeight: '100%',\r\n                      width: 'auto'\r\n                    }\r\n                  }}\r\n                >\r\n                  <img\r\n                    alt=\"Auth platform\"\r\n                    src={platformIcons[platform]}\r\n                  />\r\n                </Box>\r\n              </Box>\r\n              <Box\r\n                sx={{\r\n                  flexGrow: 1,\r\n                  mt: 3\r\n                }}\r\n              >\r\n                {platform === 'Amplify' && <PasswordResetAmplify />}\r\n              </Box>\r\n              <Divider sx={{ my: 3 }} />\r\n              {platform === 'Amplify' && (\r\n                <Link\r\n                  color=\"textSecondary\"\r\n                  component={RouterLink}\r\n                  to=\"/authentication/password-recovery\"\r\n                  variant=\"body2\"\r\n                >\r\n                  Did you not receive the code?\r\n                </Link>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Container>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PasswordReset;\r\n"],"sourceRoot":""}