{"version":3,"sources":["components/authentication/verify-code/VerifyCodeAmplify.js","pages/authentication/VerifyCode.js"],"names":["VerifyCodeAmplify","mounted","useMounted","verifyCode","useAuth","location","useLocation","navigate","useNavigate","itemsRef","useRef","useEffect","current","slice","initialValues","email","state","username","code","submit","validationSchema","Yup","shape","max","required","of","onSubmit","values","a","setErrors","setStatus","setSubmitting","join","console","error","success","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","setFieldValue","touched","noValidate","TextField","disabled","fullWidth","margin","value","variant","autoFocus","Boolean","helperText","label","name","onBlur","onChange","type","Typography","color","sx","mb","mt","Box","display","columnGap","gridTemplateColumns","pt","map","ref","i","Array","isArray","length","inputRef","el","onKeyDown","event","focus","Number","isInteger","parseInt","key","onPaste","pasteArray","clipboardData","getData","split","valid","forEach","x","textAlign","FormHelperText","mx","find","undefined","Button","size","platformIcons","Amplify","Auth0","Firebase","JWT","VerifyCode","platform","gtm","push","backgroundColor","flexDirection","minHeight","AuthBanner","Container","maxWidth","py","justifyContent","to","Logo","height","width","Card","CardContent","p","alignItems","gutterBottom","maxHeight","alt","src","flexGrow","Divider","my","Link","component","RouterLink"],"mappings":"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","file":"static/js/74.7bedcbb0.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport { Box, Button, FormHelperText, TextField, Typography } from '@material-ui/core';\r\nimport useAuth from '../../../hooks/useAuth';\r\nimport useMounted from '../../../hooks/useMounted';\r\n\r\nconst VerifyCodeAmplify = () => {\r\n  const mounted = useMounted();\r\n  const { verifyCode } = useAuth();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const itemsRef = useRef([]);\r\n\r\n  useEffect(() => {\r\n    itemsRef.current = itemsRef.current.slice(0, 6);\r\n  }, []);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: location.state?.username || '',\r\n        code: ['', '', '', '', '', ''],\r\n        submit: null\r\n      }}\r\n      validationSchema={Yup\r\n        .object()\r\n        .shape({\r\n          email: Yup\r\n            .string()\r\n            .email('Must be a valid email')\r\n            .max(255)\r\n            .required('Email is required'),\r\n          code: Yup\r\n            .array()\r\n            .of(Yup.string().required('Code is required'))\r\n        })}\r\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n        try {\r\n          await verifyCode(values.email, values.code.join(''));\r\n\r\n          navigate('/authentication/login');\r\n        } catch (err) {\r\n          console.error(err);\r\n          if (mounted.current) {\r\n            setStatus({ success: false });\r\n            setErrors({ submit: err.message });\r\n            setSubmitting(false);\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue,\r\n        touched,\r\n        values\r\n      }) => (\r\n        <form\r\n          noValidate\r\n          onSubmit={handleSubmit}\r\n        >\r\n          {!location.state?.username\r\n            ? (\r\n              <TextField\r\n                autoFocus\r\n                error={Boolean(touched.email && errors.email)}\r\n                fullWidth\r\n                helperText={touched.email && errors.email}\r\n                label=\"Email Address\"\r\n                margin=\"normal\"\r\n                name=\"email\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                type=\"email\"\r\n                value={values.email}\r\n                variant=\"outlined\"\r\n              />\r\n            )\r\n            : (\r\n              <TextField\r\n                disabled\r\n                fullWidth\r\n                margin=\"normal\"\r\n                value={location.state.username}\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          <Typography\r\n            color=\"textSecondary\"\r\n            sx={{\r\n              mb: 2,\r\n              mt: 3\r\n            }}\r\n            variant=\"subtitle2\"\r\n          >\r\n            Verification code\r\n          </Typography>\r\n          <Box\r\n            sx={{\r\n              display: 'grid',\r\n              columnGap: '16px',\r\n              gridTemplateColumns: 'repeat(7, 1fr)',\r\n              pt: 1\r\n            }}\r\n          >\r\n            {[1, 2, 3, 4, 5, 6].map((ref, i) => (\r\n              <TextField\r\n                error={Boolean(Array.isArray(touched.code)\r\n                  && touched.code.length === 6\r\n                  && errors.code)}\r\n                fullWidth\r\n                inputRef={(el) => itemsRef.current[i] = el}\r\n                // eslint-disable-next-line react/no-array-index-key\r\n                key={`code-${i}`}\r\n                name={`code[${i}]`}\r\n                onBlur={handleBlur}\r\n                onKeyDown={(event) => {\r\n                  if (event.code === 'ENTER') {\r\n                    if (values.code[i]) {\r\n                      setFieldValue(`code[${i}]`, '');\r\n                      return;\r\n                    }\r\n\r\n                    if (i > 0) {\r\n                      setFieldValue(`code[${i}]`, '');\r\n                      itemsRef.current[i - 1].focus();\r\n                      return;\r\n                    }\r\n                  }\r\n\r\n                  if (Number.isInteger(parseInt(event.key, 10))) {\r\n                    setFieldValue(`code[${i}]`, event.key);\r\n\r\n                    if (i < 5) {\r\n                      itemsRef.current[i + 1].focus();\r\n                    }\r\n                  }\r\n                }}\r\n                onPaste={(event) => {\r\n                  const paste = event.clipboardData.getData('text');\r\n                  const pasteArray = paste.split('');\r\n\r\n                  if (pasteArray.length !== 6) {\r\n                    return;\r\n                  }\r\n\r\n                  let valid = true;\r\n\r\n                  pasteArray.forEach((x) => {\r\n                    if (!Number.isInteger(parseInt(x, 10))) {\r\n                      valid = false;\r\n                    }\r\n                  });\r\n\r\n                  if (valid) {\r\n                    setFieldValue('code', pasteArray);\r\n                    itemsRef.current[5].focus();\r\n                  }\r\n                }}\r\n                value={values.code[i]}\r\n                sx={{\r\n                  display: 'inline-block',\r\n                  textAlign: 'center',\r\n                  '& .MuiInputBase-input': {\r\n                    textAlign: 'center'\r\n                  }\r\n                }}\r\n                variant=\"outlined\"\r\n              />\r\n            ))}\r\n          </Box>\r\n          {Boolean(Array.isArray(touched.code)\r\n            && touched.code.length === 6\r\n            && errors.code) && (\r\n            <FormHelperText\r\n              error\r\n              sx={{ mx: '14px' }}\r\n            >\r\n              {Array.isArray(errors.code) && errors.code.find((x) => x !== undefined)}\r\n            </FormHelperText>\r\n          )}\r\n          {errors.submit && (\r\n            <Box sx={{ mt: 3 }}>\r\n              <FormHelperText error>\r\n                {errors.submit}\r\n              </FormHelperText>\r\n            </Box>\r\n          )}\r\n          <Box sx={{ mt: 3 }}>\r\n            <Button\r\n              color=\"primary\"\r\n              disabled={isSubmitting}\r\n              fullWidth\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n            >\r\n              Verify\r\n            </Button>\r\n          </Box>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default VerifyCodeAmplify;\r\n","import { useEffect } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { Box, Card, CardContent, Container, Divider, Link, Typography } from '@material-ui/core';\r\nimport AuthBanner from '../../components/authentication/AuthBanner';\r\nimport { VerifyCodeAmplify } from '../../components/authentication/verify-code';\r\nimport Logo from '../../components/Logo';\r\nimport useAuth from '../../hooks/useAuth';\r\nimport gtm from '../../lib/gtm';\r\n\r\nconst platformIcons = {\r\n  Amplify: '/static/icons/amplify.svg',\r\n  Auth0: '/static/icons/auth0.svg',\r\n  Firebase: '/static/icons/firebase.svg',\r\n  JWT: '/static/icons/jwt.svg'\r\n};\r\n\r\nconst VerifyCode = () => {\r\n  const { platform } = useAuth();\r\n\r\n  useEffect(() => {\r\n    gtm.push({ event: 'page_view' });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Verify Code | Material Kit Pro</title>\r\n      </Helmet>\r\n      <Box\r\n        sx={{\r\n          backgroundColor: 'background.default',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          minHeight: '100vh'\r\n        }}\r\n      >\r\n        <AuthBanner />\r\n        <Container\r\n          maxWidth=\"sm\"\r\n          sx={{ py: 10 }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'center'\r\n            }}\r\n          >\r\n            <RouterLink to=\"/\">\r\n              <Logo\r\n                sx={{\r\n                  height: 40,\r\n                  width: 40\r\n                }}\r\n              />\r\n            </RouterLink>\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              mb: 8\r\n            }}\r\n          />\r\n          <Card>\r\n            <CardContent\r\n              sx={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                p: 4\r\n              }}\r\n            >\r\n              <Box\r\n                sx={{\r\n                  alignItems: 'center',\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                  mb: 3\r\n                }}\r\n              >\r\n                <div>\r\n                  <Typography\r\n                    color=\"textPrimary\"\r\n                    gutterBottom\r\n                    variant=\"h4\"\r\n                  >\r\n                    Verify Code\r\n                  </Typography>\r\n                  <Typography\r\n                    color=\"textSecondary\"\r\n                    variant=\"body2\"\r\n                  >\r\n                    Confirm registration using your verification code\r\n                  </Typography>\r\n                </div>\r\n                <Box\r\n                  sx={{\r\n                    height: 32,\r\n                    '& > img': {\r\n                      maxHeight: '100%',\r\n                      width: 'auto'\r\n                    }\r\n                  }}\r\n                >\r\n                  <img\r\n                    alt=\"Auth platform\"\r\n                    src={platformIcons[platform]}\r\n                  />\r\n                </Box>\r\n              </Box>\r\n              <Box\r\n                sx={{\r\n                  flexGrow: 1,\r\n                  mt: 3\r\n                }}\r\n              >\r\n                {platform === 'Amplify' && <VerifyCodeAmplify />}\r\n              </Box>\r\n              <Divider sx={{ my: 3 }} />\r\n              {platform === 'Amplify' && (\r\n                <Link\r\n                  color=\"textSecondary\"\r\n                  component={RouterLink}\r\n                  to=\"/authentication/password-recovery\"\r\n                  variant=\"body2\"\r\n                >\r\n                  Did you not receive the code?\r\n                </Link>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Container>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default VerifyCode;\r\n"],"sourceRoot":""}